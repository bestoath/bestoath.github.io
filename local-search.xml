<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript 条件类型</title>
    <link href="/2023/10/15/2023-10-16/"/>
    <url>/2023/10/15/2023-10-16/</url>
    
    <content type="html"><![CDATA[<h2 id="条件类型"><a href="#条件类型" class="headerlink" title="条件类型"></a>条件类型</h2><p>基本用法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">live</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-title function_">woof</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Example1</span> = <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> ? <span class="hljs-built_in">number</span> : <span class="hljs-built_in">string</span><br><span class="hljs-comment">// type Example1 = number</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Example2</span> = <span class="hljs-title class_">RegExp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> ? <span class="hljs-built_in">number</span> : <span class="hljs-built_in">string</span><br><span class="hljs-comment">// type Example2 = string</span><br></code></pre></td></tr></table></figure><p>类似 JavaScript 的三元表达式</p><h2 id="infer-关键字"><a href="#infer-关键字" class="headerlink" title="infer 关键字"></a><code>infer</code> 关键字</h2><p><code>infer</code> 关键字可以从条件类型中与之进行比较的类型中进行推断。例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Flatten</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Array</span>&lt;infer <span class="hljs-title class_">Item</span>&gt; ? <span class="hljs-title class_">Item</span> : <span class="hljs-title class_">Type</span><br></code></pre></td></tr></table></figure><p>这里我们使用 <code>infer</code> 从 true 分支中推断 <code>Flatten</code> 数组中的元素类型</p><h3 id="提取函数返回值类型"><a href="#提取函数返回值类型" class="headerlink" title="提取函数返回值类型"></a>提取函数返回值类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">GetReturnType</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span> <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">never</span>[]) =&gt; infer <span class="hljs-title class_">Return</span><br>? <span class="hljs-title class_">Return</span><br>: <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Num</span> = <span class="hljs-title class_">GetReturnType</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">number</span>&gt;<br><span class="hljs-comment">// type Num = number</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Str</span> = <span class="hljs-title class_">GetReturnType</span>&lt;<span class="hljs-function">(<span class="hljs-params">x: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>&gt;<br><span class="hljs-comment">// type Str = string</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Bools</span> = <span class="hljs-title class_">GetReturnType</span>&lt;<span class="hljs-function">(<span class="hljs-params">a: <span class="hljs-built_in">boolean</span>, b: <span class="hljs-built_in">boolean</span></span>) =&gt;</span> <span class="hljs-built_in">boolean</span>[]&gt;<br><span class="hljs-comment">// type Bools = boolean[]</span><br></code></pre></td></tr></table></figure><h3 id="提取函数参数类型"><a href="#提取函数参数类型" class="headerlink" title="提取函数参数类型"></a>提取函数参数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ParamType</span>&lt;T&gt; = T <span class="hljs-keyword">extends</span> (<span class="hljs-attr">param</span>: infer P) =&gt; <span class="hljs-built_in">any</span> ? P : <span class="hljs-built_in">never</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Func</span> = <span class="hljs-function">(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) =&gt;</span> <span class="hljs-built_in">string</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Param</span> = <span class="hljs-title class_">ParamType</span>&lt;<span class="hljs-title class_">Func</span>&gt;<br><span class="hljs-comment">// type Param = number</span><br></code></pre></td></tr></table></figure><h3 id="提取泛型参数类型"><a href="#提取泛型参数类型" class="headerlink" title="提取泛型参数类型"></a>提取泛型参数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ExtractType</span>&lt;T&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Promise</span>&lt;infer U&gt; ? U : <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> myPromise = <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">number</span>&gt;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Result</span> = <span class="hljs-title class_">ExtractType</span>&lt;myPromise&gt;<br><span class="hljs-comment">// type Result = number</span><br></code></pre></td></tr></table></figure><h3 id="与-infer-有关的内置类型"><a href="#与-infer-有关的内置类型" class="headerlink" title="与 infer 有关的内置类型"></a>与 <code>infer</code> 有关的内置类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 获取返回值类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ReturnType</span>&lt;T <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>&gt; = T <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; infer R ? R : <span class="hljs-built_in">any</span>;<br><br><span class="hljs-comment">// 获取参数类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Parameters</span>&lt;T <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>&gt; = T <span class="hljs-keyword">extends</span> (...<span class="hljs-attr">args</span>: infer P) =&gt; <span class="hljs-built_in">any</span> ? P : <span class="hljs-built_in">never</span>;<br><br><span class="hljs-comment">// 获取构造函数参数类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ConstructorParameters</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: infer P) =&gt; <span class="hljs-built_in">any</span> ? P : <span class="hljs-built_in">never</span>;<br><br><span class="hljs-comment">// 获取实例类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">InstanceType</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">any</span>&gt; = T <span class="hljs-keyword">extends</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">new</span> (...<span class="hljs-attr">args</span>: <span class="hljs-built_in">any</span>) =&gt; infer R ? R : <span class="hljs-built_in">any</span>;<br><br></code></pre></td></tr></table></figure><h2 id="分配条件类型"><a href="#分配条件类型" class="headerlink" title="分配条件类型"></a>分配条件类型</h2><p>当传入的类型参数为联合类型时，他们会被分配参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ToArray</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span> ? <span class="hljs-title class_">Type</span>[] : <span class="hljs-built_in">never</span><br></code></pre></td></tr></table></figure><p>如果我们将联合类型传入 <code>ToArray</code> ，则条件类型将应用于该联合类型的每个成员。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ToArray</span>&lt;<span class="hljs-title class_">Type</span>&gt; = <span class="hljs-title class_">Type</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span> ? <span class="hljs-title class_">Type</span>[] : <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">StrArrOrNumArr</span> = <span class="hljs-title class_">ToArray</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>&gt;<br><span class="hljs-comment">// type StrArrOrNumAoo = string[] | number[]</span><br></code></pre></td></tr></table></figure><p>要避免这种行为，可以用方括号括起 <code>extends</code> 关键字的两边</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ToArrayNonDist</span>&lt;<span class="hljs-title class_">Type</span>&gt; = [<span class="hljs-title class_">Type</span>] <span class="hljs-keyword">extends</span> [<span class="hljs-built_in">any</span>] ? <span class="hljs-title class_">Type</span>[] : <span class="hljs-built_in">never</span><br><br><span class="hljs-comment">// &#x27;StrOrNumArr&#x27; 不再是一个联合类型</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">StrOrNumArr</span> = <span class="hljs-title class_">ToArrayNonDist</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>&gt;<br><span class="hljs-comment">// type StrOrNumArr = (string | number)[]</span><br></code></pre></td></tr></table></figure><h3 id="有关的内置类型"><a href="#有关的内置类型" class="headerlink" title="有关的内置类型"></a>有关的内置类型</h3><h4 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude&lt;T, U&gt;"></a><code>Exclude&lt;T, U&gt;</code></h4><p>排除 <code>T</code> 中所有可分配给 <code>U</code> 的所有类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Exclude</span>&lt;T, U&gt; = T <span class="hljs-keyword">extends</span> U ? <span class="hljs-built_in">never</span> : T<br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>&gt;<br><span class="hljs-comment">//type T0 = &quot;b&quot; | &quot;c&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T1</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span>&gt;<br><span class="hljs-comment">// type T1 = &quot;c&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T2</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | (<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>), <span class="hljs-title class_">Function</span>&gt;<br><span class="hljs-comment">// type T2 = string | number</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Shape</span> =<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;circle&quot;</span>; <span class="hljs-attr">radius</span>: <span class="hljs-built_in">number</span> &#125;<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;square&quot;</span>; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span> &#125;<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;triangle&quot;</span>; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span> &#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T3</span> = <span class="hljs-title class_">Exclude</span>&lt;<span class="hljs-title class_">Shape</span>, &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;circle&quot;</span> &#125;&gt;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * type T3 = &#123;</span><br><span class="hljs-comment"> *   kind: &quot;square&quot;;</span><br><span class="hljs-comment"> *   x: number;</span><br><span class="hljs-comment"> * &#125; | &#123;</span><br><span class="hljs-comment"> *   kind: &quot;triangle&quot;;</span><br><span class="hljs-comment"> *   x: number;</span><br><span class="hljs-comment"> *   y: number;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="Extract"><a href="#Extract" class="headerlink" title="Extract&lt;T, U&gt;"></a><code>Extract&lt;T, U&gt;</code></h4><p>提取 <code>T</code> 中所有可分配给 <code>U</code> 的所有类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Extract</span>&lt;T, U&gt; = T <span class="hljs-keyword">extends</span> U ? T : <span class="hljs-built_in">never</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-title class_">Extract</span>&lt;<span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;b&quot;</span> | <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;a&quot;</span> | <span class="hljs-string">&quot;f&quot;</span>&gt;<br><span class="hljs-comment">// type T0 = &quot;a&quot;</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T1</span> = <span class="hljs-title class_">Extract</span>&lt;<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | (<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>), <span class="hljs-title class_">Function</span>&gt;<br><span class="hljs-comment">// type T1 = () =&gt; void</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Shape</span> =<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;circle&quot;</span>; <span class="hljs-attr">radius</span>: <span class="hljs-built_in">number</span> &#125;<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;square&quot;</span>; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span> &#125;<br>| &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;triangle&quot;</span>; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span>; <span class="hljs-attr">y</span>: <span class="hljs-built_in">number</span> &#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-variable constant_">T2</span> = <span class="hljs-title class_">Extract</span>&lt;<span class="hljs-title class_">Shape</span>, &#123; <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;circle&quot;</span> &#125;&gt;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * type T2 = &#123;</span><br><span class="hljs-comment"> *   kind: &quot;circle&quot;;</span><br><span class="hljs-comment"> *   radius: number;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">TypeScript 官方文档</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/tips/infer.html">深入理解 TypeScript</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/14/hello-world/"/>
    <url>/2023/10/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
